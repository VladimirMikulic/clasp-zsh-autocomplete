#compdef clasp

# ------------------------------------------------------------------------------
# MIT License
#
# Copyright (c) 2020 Vladimir Mikulic
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# ------------------------------------------------------------------------------
# Description
# -----------
#
#  Completion script for the Google's Command Line Apps Script Projects CLI
#  Learn More (https://developers.google.com/apps-script)
#
# ------------------------------------------------------------------------------
# Authors
# -------
#
#  * Vladimir Mikulic (https://github.com/VladimirMikulic) <vladimir.mikulic2@gmail.com>
#
# ------------------------------------------------------------------------------

_clasp() {

typeset -A opt_args
local context state line

local curcontext="$curcontext"

local ret=1

_arguments -C -A "-*" \
'(-h --help)'{-h,--help}'[Output usage information]' \
'(-v --version)'{-v,--version}'[Noisy logging, including all shell commands executed]' \
'1: :_root_commands' \
'*::arg:->args' \
&& ret=0

  case "$state" in
    (args)
      case $words[1] in
        (help)
            _arguments -C \
            '1: :_root_commands' \
          && ret=0
        ;;
        (login)
            _arguments -C \
            '--no-localhost[Do not run a local server, manually enter code instead]' \
            '--creds[Relative path to credentials (from GCP)]: :_files' \
            '--status[Print who is logged in]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (logout)
            _arguments -C \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (create)
            _arguments -C \
            '--title[The project title]' \
            '--type[Creates a new Apps Script project]: :(standalone docs sheets slides forms webapp api)' \
            '--rootDir[Local root directory in which clasp will store your project files]:directories:_files -/' \
            '--parentId[A project parent Id]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (clone)
            _arguments -C \
            '--rootDir[Local root directory in which clasp will store your project files]:directories:_files -/' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (pull)
            _arguments -C \
            '--versionNumber[The version number of the project to retrieve]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (push)
            _arguments -C \
            '(-w --watch)'{-w,--watch}'[Watches for local file changes. Pushes when a non-ignored file changs]' \
            '(-f --force)'{-f,--force}'[Forcibly overwrites the remote manifest]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (status)
            _arguments -C \
            '--json[Show status in JSON form]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (open)
            _arguments -C \
            "--webapp[Open web application in the browser]" \
            "--creds[Open the URL to create credentials]" \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (deployments)
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (deploy)
            _arguments -C \
            '(-V --versionNumber)'{-V,--versionNumber}'[The project version]' \
            '(-d --description)'{-d,--description}'[The deployment description]' \
            '(-i --deploymentId)'{-i,--deploymentId}'[The deployment ID to redeploy]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (undeploy)
            _arguments -C \
            '(-a --all)'{-a,--all}'[Undeploy all deployments]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (version)
            _arguments -C \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (versions)
            _arguments -C \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (list)
            _arguments -C \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (logs)
            _arguments -C \
            "--json[Show logs in JSON form]" \
            "--open[Open the StackDriver logs in the browser]" \
            "--setup[Setup StackDriver logs]" \
            "--watch[Watch and print new logs]" \
            "--simplified[Hide timestamps with logs]" \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (setting)
            _arguments -C \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
        (apis)
        _arguments -C \
            '(-h --help)'{-h,--help}'[Output usage information]' \
            '--open[Open the API Console in the browser]' \
            '1: :_apis_subcommands' \
            '*::pkg-arg:->pkg-args' \
          && ret=0
          case "$state" in
            (pkg-args)
              case $words[1] in
                (list)
                  _arguments \
                    '(-h --help)'{-h,--help}'[Output usage information]' \
                  && ret=0
                ;;
                (enable)
                  _arguments \
                    '(-h --help)'{-h,--help}'[Output usage information]' \
                  && ret=0
                ;;
                (disable)
                  _arguments \
                    '(-h --help)'{-h,--help}'[Output usage information]' \
                  && ret=0
                ;;
            esac
            ;;
          esac
        ;;
        (run)
            _arguments -C \
            '--nondev[Run script function in non-devMode]' \
            '(-p --params)'{-p,--params}'[Add parameters required for the function as a JSON String Array]' \
            '(-h --help)'{-h,--help}'[Output usage information]' \
          && ret=0
        ;;
      esac
    ;;
  esac

  return ret
}


(( $+functions[root_commands] )) ||
_root_commands() {
  local commands;
  commands=(
    'login:Log in to script.google.com'
    'logout:Log out'
    'create:Create a script'
    'clone:Clone a project'
    'pull:Fetch a remote project'
    'push:Update the remote project'
    'status:Lists files that will be pushed by clasp'
    'open:Open a script'
    'deployments:List deployment ids of a script'
    'deploy:Deploy a project'
    'undeploy:Undeploy a deployment of a project'
    'version:Creates an immutable version of the script'
    'versions:List versions of a script'
    'list:List App Scripts projects'
    'logs:Shows the StackDriver logs'
    'apis:List, enable, or disable APIs'
    'setting:Update <settingKey> in .clasp.json'
    'run:Run a function in your Apps Scripts project'
  )
  _describe -t commands 'command' commands "$@"
}

(( $+functions[_apis_subcommands] )) ||
_apis_subcommands() {
  local subcommands;
  subcommands=(
    "list:List Google APIs that can be enabled as Advanced Services"
    "enable:Enable an API"
    "disable:Disable an API"
  )
  _describe -t subcommands 'subcommand' subcommands "$@"
}

_clasp "$@"
